다중티어아키텍처

1. 클라이언트 티어 : HTTP(Hypertext Transfer Protocol)
- 클라이언트 애플리케이션이 리소스를 서버에 요청하면 서버는 요청을 받고 응답을 준다.
- 주로 응답은 HTML형식이다.

2. 미들 티어 : 웹컨테이너와 EJB
- 웹 레이어 : 클라이언트 티어와 비즈니스 레이어 간 상호작용
    *JSP(Java Server Pages) 자바 서버 페이지
    *EL(Expression Language) 표현식 언어
    *JSTL(JavaServer Pages Standard Tag Library) 자바 서버 페이지 표준 태그 라이브러리
    *Servlet
- 비즈니스 레이어 : 업무 요건 처리 및 도메인 내부의 특정 비즈니스 로직 실행
    애플리케이션의 주요 로직이 존재함.
    *JPA(Java Persistence API)
    *JTA(Java Transaction API)
    *JDBC(Java Database Connectivity)

3. EIS 티어 : DB형태의 데이터 저장 단위(ex. 오래된 레거시 시스템, 파일 시스템)
- 데이터 티어(Data tier), 퍼시스턴스 티어(Persistence tier), 통합 티어(Integration tier)라고 함.

4. Java EE Server

5. Java EE 웹 프로파일 : 웹 개발 엔터프라이즈 애플리케이션 개발에 적합한 기술의 하위 기술 집합
- Servlet, JSF/JSP, EJB(비즈니스 로직), JTA, JPA, 웹 소켓 등

* CoC(Convention over Configuration,설정보다 관례)

* 컨텍스트와 의존체 주입 : new 키워드를 사용하는 것이 아닌 객체 안에 의존체를 넣는 사상.

* CDI-관리 빈(CDI-managed) : 컨테이너 시동 시 빈 인스턴스 생성(@Inject를 사용한다.)
- 스코프 4가지
  1) 애플리케이션 스코프(@ApplicationScoped)
  2) 대화 스코프(@ConversationScoped)
  3) 새션 스코프(@SessionScoped)
  4) 요청 스코프(@RequestScopted)
- 단, EJB는 스코프에 얽매이지 않는다.
ex) 
[의존체 주입 -의존체]
public class Message{
  public String getMessage(){
    return "안녕하세요.";
  }
}

[의존체 주입 -수신자]
public class Service{
  @Inject
  private Message message;
  
  public void showMessage(){
    System.out.println(message.getMessage());
  }
}
  

6. 인터셉터
- 횡단 관심사(cross-lcutting concerns) : 공통 로직을 수행하는 등 핵심 구현 로직이 아닌 부분.
@Interceptors 뒤에 횡단 관심사에 해당하는 클래스명을 사용함.


    

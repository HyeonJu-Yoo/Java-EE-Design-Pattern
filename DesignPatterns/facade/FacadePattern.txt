퍼사드 패턴 : 
- 복잡한 비즈니스 로직을 상위 레벨에서 ["캡슐화"]하고, 접근 지점을 명확하게 단일화하여 API를 통해서만 접근하도록 유도함.
- 하위 시스템의 인터페이스 세트에 일관된 인터페이스를 제공하는 것.
- 하위 시스템의 복잡도를 감추는 동시에 그 전체 기능을 사용하기 쉬운 인터페이스로 제공함.
- 많이 사용 하는 경우
    1) 레거시 백엔드 시스템에 일 접근 창구 제공
    2) 클래스에 드라이버 같은 퍼블릭 API 제공
    3) 거시적 서비스에 접근하는 창구.
    4) 네트워크 호출을 줄이는 경우.
    5) 보안과 단순함 측면에서 애플리케이션 내부 상세 흐름 캡슐화

- 장점
    1) 클라이언트가 하위 시스템을 알 필요가 없으므로 결합도가 낮아진다.
    2) 코드 변경 시 유지보수성, 관리성이 좋아진다.
    3) 로직을 다시 사용할 수 있어 기능을 재사용할 일이 많아진다.
    4) 여러 번 실행해도 호출하는 메서드는 동일하므로 일관된 서비스가 보장된다.
    5) 연관된 메서드를 한 메서드로 묶어 호출하므로 비즈니스 로직이 덜 복잡해진다.
    6) 보안 및 트랜잭션 관리를 중앙화한다.
    7) 테스트할 수 있고, mock을 쓸 수 있는 패턴으로 구현한다.

- 단점
    1) 클라이언트가 일부러 대화를 끝내거나 타임아웃 나기 전까지 서버의 리소스를 소유하고 있다.
    2) 무상태성 세션 퍼사드와 달리, 상태 세셭 퍼사드는 요청할 때마다 클라이언트 세션을 유지한 채,
        새 인스턴스를 생성하므로 재사용 및 공유가 불가하다.
    
